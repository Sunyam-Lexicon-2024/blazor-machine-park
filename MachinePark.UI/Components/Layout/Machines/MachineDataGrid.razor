@inject HttpClient apiClient

<MudContainer Class="d-flex flex-column mt-5 mb-5">
    <div Class="mb-5">
        <h2>Machines</h2>
    </div>
    <MudPaper Elevation="25">
        <MachineToolBar FormModeToggle="@((FormMode mode) => @OnFormModeHasChanged(mode))" />
    </MudPaper>
    <MudDataGrid Items="@Machines">
        <Columns>
            <PropertyColumn Property="m => m.Id" />
            <PropertyColumn Property="m => m.Name" />
            <PropertyColumn Property="m => m.Online" />
            <PropertyColumn Property="m => m.Section" />
            <TemplateColumn T="MachineModel">
                <CellTemplate>
                    <MudTooltip Text="Delete Machine">
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete machine"
                            OnClick="@(() => DeleteMachine(context.Item))" />
                    </MudTooltip>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn T="MachineModel">
                <CellTemplate>
                    <MudTooltip Text="Edit Machine">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" aria-label="edit machine"
                            OnClick="@(() => EditMachine(context.Item))" />
                    </MudTooltip>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
</MudContainer>

@code {

    [Parameter]
    public IEnumerable<MachineModel> Machines { get; set; } = [];

    [Parameter]
    public EventCallback DataUpdate { get; set; }
    [Parameter]
    public EventCallback<MachineModel> EditFormMode { get; set; }
    [Parameter]
    public EventCallback<FormMode> FormModeChanged { get; set; }
    private async Task OnFormModeHasChanged(FormMode mode)
    {
        await FormModeChanged.InvokeAsync(mode);
    }

    private async Task EditMachine(MachineModel model)
    {
        await EditFormMode.InvokeAsync(model);
    }

    private async Task DeleteMachine(MachineModel model)
    {
        try
        {
            var response = await apiClient.DeleteAsync($"http://localhost:5000/api/machines/{model.Id}");
            if (response.IsSuccessStatusCode)
            {
                await DataUpdate.InvokeAsync();
            }
            else
            {
                Log.Error("RESPONSE STATUS CODE: " + response.StatusCode.ToString());
            }
        }
        catch (Exception ex)
        {
            Log.Error(ex.Message);
        }
    }
}