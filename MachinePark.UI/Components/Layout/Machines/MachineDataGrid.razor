@inject HttpClient ApiClient
@inject IDialogService DialogService

<MudContainer Class="d-flex flex-column mb-5">
    <MudElement HtmlTag="div" Class="mb-5 d-flex align-center ">
        <MudIcon Class="mr-2" Icon="@Icons.Material.Filled.TableView" />
        <h2>Machines</h2>
    </MudElement>
    @if (ApiState == ApiState.Reachable)
    {
        if(Machines is not null && Machines.Any())
        {
            <MudPaper Elevation="25">
                <MachineToolBar MachineAdded="@OnMachineAdded"/>
                <MudDivider />
                <MudDataGrid
                    ServerData="@((GridState<MachineModel> state) => GetMachineServerData(state))"
                    Hover="true" 
                    ColumnResizeMode="@ResizeMode.Container" 
                    DragDropColumnReordering="true"
                    RowsPerPage="5" 
                >
                    <Columns>
                        <PropertyColumn Property="m => m.Id" />
                        <PropertyColumn Property="m => m.Name" />
                        <TemplateColumn Title="Status" SortBy="@(m => m.Online)">
                            <CellTemplate>
                                @if(context.Item.Online) {
                                    <MudElement> <MudIcon Color="@Color.Success" Icon="@Icons.Material.Filled.OfflineBolt" /> </MudElement>
                                }
                                else {
                                    <MudElement> <MudIcon Color="@Color.Error" Icon="@Icons.Material.Filled.OfflineBolt" /> </MudElement>
                                }
                            </CellTemplate>
                        </TemplateColumn>
                        <PropertyColumn Property="m => m.Section" />
                        <PropertyColumn Property="m => m.CreatedAt" Title="Created At" />
                        <PropertyColumn Property="m => m.UpdatedAt" Title="Updated At" />
                        <TemplateColumn T="MachineModel">
                            <CellTemplate>
                                <MudTooltip Text="Delete Machine">
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete machine"
                                        OnClick="@(() => DeleteMachine(context.Item))" />
                                </MudTooltip>
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn T="MachineModel">
                            <CellTemplate>
                                <MudTooltip Text="Edit Machine">
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" aria-label="edit machine"
                                        OnClick="@(() => EditMachine(context.Item))" />
                                </MudTooltip>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                    <PagerContent>
                        <MudDataGridPager T="MachineModel" PageSizeOptions=@(new int[] {5, 10, 20})/>
                    </PagerContent>
                </MudDataGrid>
            </MudPaper>
        } 
        else {
            <MudPaper>
                <MudAlert Severity="Severity.Info">No data available</MudAlert>
            </MudPaper>
        }
    }
    else
    {
        <MudPaper>
            <MudAlert Severity="Severity.Error">API not available</MudAlert>
        </MudPaper>
    }
</MudContainer>

@code {

    [Parameter]
    public IEnumerable<MachineModel>? Machines { get; set; } = [];

    [Parameter]
    public ApiState ApiState { get; set; }

    [Parameter]
    public EventCallback DataUpdate { get; set; }

    private async Task<GridData<MachineModel>> GetMachineServerData(GridState<MachineModel> state) 
    {
        GridData<MachineModel> data = new();    
        
        var machineData = await ApiClient.GetFromJsonAsync<IEnumerable<MachineModel>>($"machines/get-all-machines?Page={state.Page}&PageSize={state.PageSize}");
        
        if(machineData is not null && machineData.Any()) 
        {
            data.Items = machineData;
            data.TotalItems = machineData.Count();    
        }
        else
        {
            data.Items = [];
            data.TotalItems = 0;
        }
        return data;
    }

    private async Task EditMachine(MachineModel model)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters<EditMachineDialog> { { d => d.FormModel, model } };
        var dialog = DialogService.Show<EditMachineDialog>(null, parameters, options);
        var result = await dialog.Result;
        if(!result.Canceled) {
            await DataUpdate.InvokeAsync();
        }
    }

    private async Task OnMachineAdded() {
        await DataUpdate.InvokeAsync();
    }

    private async Task DeleteMachine(MachineModel model)
    {
        try
        {
            await ApiClient.DeleteAsync($"machines/{model.Id}");
            await DataUpdate.InvokeAsync();
        }
        catch (Exception ex)
        {
            Log.Error(ex, "Encountered error when attempting to delete machine");
        }
    }
}