@inject HttpClient ApiClient
@inject IDialogService DialogService

<MudContainer Class="d-flex flex-column mb-5">
    <MudElement HtmlTag="div" Class="mb-5 d-flex align-center ">
        <MudIcon Class="mr-2" Icon="@Icons.Material.Filled.TableView" />
        <h2>Machines</h2>
    </MudElement>
            <MudPaper Elevation="25">
                <MudDivider />
                <MudDataGrid 
                    @ref="_dataGrid"
                    T="MachineModel"
                    ServerData="LoadData"
                    Hover="true" 
                    ColumnResizeMode="@ResizeMode.Container" 
                    DragDropColumnReordering="true"
                    RowsPerPage="5" 
                    ShowMenuIcon="true"
                >
                    <ToolBarContent>
                        <MachineToolBar DataSetSizeChange="@((int setSize) => OnDataSetSizeChange(setSize))" SearchInitiated="@((string? searchTerm) => OnSearchInitiated(searchTerm))" />
                        <MudSpacer/>
                    </ToolBarContent>
                    <Columns>
                        <PropertyColumn Property="m => m.Id" />
                        <PropertyColumn Property="m => m.Name" />
                        <TemplateColumn Title="Status" SortBy="@((_) => nameof(MachineModel.Online))">
                            <CellTemplate>
                                @if(context.Item.Online) {
                                    <MudElement> <MudIcon Color="@Color.Success" Icon="@Icons.Material.Filled.OfflineBolt" /> </MudElement>
                                }
                                else {
                                    <MudElement> <MudIcon Color="@Color.Error" Icon="@Icons.Material.Filled.OfflineBolt" /> </MudElement>
                                }
                            </CellTemplate>
                        </TemplateColumn>
                        <PropertyColumn Property="m => m.Section" />
                        <PropertyColumn Property="m => m.CreatedAt" Title="Created At" />
                        <PropertyColumn Property="m => m.UpdatedAt" Title="Updated At" />
                        <TemplateColumn T="MachineModel">
                            <CellTemplate>
                                <MudTooltip Text="Delete Machine">
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete machine"
                                        OnClick="@(() => DeleteMachine(context.Item))" />
                                </MudTooltip>
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn T="MachineModel">
                            <CellTemplate>
                                <MudTooltip Text="Edit Machine">
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" aria-label="edit machine"
                                        OnClick="@(() => EditMachine(context.Item))" />
                                </MudTooltip>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                    <PagerContent>
                        <MudDataGridPager T="MachineModel" PageSizeOptions=@(new int[] {5, 10, 20}) />
                    </PagerContent>
                </MudDataGrid>
            </MudPaper>
</MudContainer>

@code {

    private string SortInfo = string.Empty;

    private MudDataGrid<MachineModel>? _dataGrid { get; set;}

    private int _dataSetSize = 100;

    private string? _searchTerm;

    private async Task<GridData<MachineModel>> LoadData(GridState<MachineModel> state) 
    {
        GridData<MachineModel> data = new();    
    
        MachineData?  machineData = await FetchData(state);

        if(machineData is not null && machineData.Machines!.Any()) 
        {
            data.Items = machineData.Machines!.Take(_dataGrid!.RowsPerPage);
            data.TotalItems = machineData.SetSize;
        }
        else
        {
            data.Items = [];
            data.TotalItems = 0;
        }

        return data;
    }

    private class MachineData {
        public IEnumerable<MachineModel>? Machines {get;set;}
        public int SetSize {get;set;}
    }

    private async Task<MachineData?> FetchData(GridState<MachineModel> state) {

        MachineData? machineData;

        string queryURL = "machines/get-all-machines";
        
        if(_dataSetSize == 0) {
            queryURL += $"?Page={state.Page}&PageSize={state.PageSize}&SetSize={_dataSetSize}";
        }
        else {
            queryURL += $"?Page={state.Page}&PageSize={state.PageSize}";
        }

        if (state.SortDefinitions.Any()) {
            // TBD Allow for multisort
            foreach(var def in state.SortDefinitions) 
            {
                var isGuid = Guid.TryParse(def.SortBy, out _);
                var sortBy = isGuid? def.SortFunc(new MachineModel()).ToString() : def.SortBy;
                var sortDirection = def.Descending ? "Descending" : "Ascending";
                queryURL += $"&SortBy={sortBy}&SortDirection={sortDirection}";
            }
        }

        if(!string.IsNullOrWhiteSpace(_searchTerm)) {
            queryURL += $"Search={_searchTerm}";
        }

        machineData = await ApiClient.GetFromJsonAsync<MachineData>(queryURL);
        
        return machineData;
    }

    private async Task OnSearchInitiated(string? searchTerm) {
        _searchTerm = searchTerm;
        await _dataGrid!.ReloadServerData();
    }

    private async Task OnDataSetSizeChange(int newSetSize){
        _dataSetSize = newSetSize;
        await _dataGrid!.ReloadServerData();
    }

    private async Task EditMachine(MachineModel model)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters<EditMachineDialog> { { d => d.FormModel, model } };
        var dialog = DialogService.Show<EditMachineDialog>(null, parameters, options);
        var result = await dialog.Result;
    }

    private async Task DeleteMachine(MachineModel model)
    {
        try
        {
            await ApiClient.DeleteAsync($"machines/{model.Id}");
        }
        catch (Exception ex)
        {
            Log.Error(ex, "Encountered error when attempting to delete machine");
        }
    }
}