@inject HttpClient ApiClient
@inject IDialogService DialogService
@inject IConfiguration Configuration

<MudElement Class="d-flex flex-row justify-center align-center ">
    <MudTooltip Text="Add New Machine" Delay="300" Duration="500">
        <MudIconButton Icon="@Icons.Material.Outlined.Add" OnClick="AddMachine" />
    </MudTooltip>
    <MudTooltip Text="Select the amount of data to get" Delay="300" Duration="500">
        <MudSelect Value="@_sizeSelection" ValueChanged="@((int value) => SetDataSize(value))" T="int"
            Variant="Variant.Outlined" Label="set size" Margin="Margin.Dense">
            @foreach (var size in DataSizes)
            {
                <MudSelectItem T="int" Value="@(size)" />
            }
            <MudSelectItem T="int" Value="0">All</MudSelectItem>
        </MudSelect>
    </MudTooltip>
    <MudTooltip Text="Switch between server and client data sourcing" Delay="300" Duration="500">
        <MudSwitch Value="@ServerDataMode" Class="mx-2" T="bool" Label="Server Data" Color="Color.Success"
            ValueChanged="@ChangeDataMode" />
    </MudTooltip>
    @if (ServerDataMode)
    {
        <MudTooltip Text="Input for searching" Delay="300" Duration="500">
            <MudTextField Class="mx-2 mt-0" T="string" InputType="InputType.Search" Variant="Variant.Outlined"
                Margin="Margin.Dense" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                Label="Search" @bind-Value="@SearchTerm"></MudTextField>
        </MudTooltip>
        <MudTooltip Text="Free text search" Delay="300" Duration="500">
        <MudButton Class="mx-2" Variant="Variant.Filled" Color="Color.Primary" OnClick="Search">Search</MudButton>
    </MudTooltip>
    }
    else
    {
        <MudTooltip Text="Input for searching" Delay="300" Duration="500">
            <MudTextField Class="mx-2 mt-0" Margin="Margin.Dense" Variant="Variant.Outlined" @bind-Value="SearchTerm"
                Label="Search" Adornment="Adornment.Start" Immediate="true" AdornmentIcon="@Icons.Material.Filled.Search"
                IconSize="Size.Medium"></MudTextField>
        </MudTooltip>
    }
</MudElement>


@code
{

    private IEnumerable<int> DataSizes = [100, 500, 1000, 1500, 2000, 2500, 5000];
    private int _sizeSelection = 100;

    [CascadingParameter]
    public string SearchTerm { get; set; } = string.Empty;

    [CascadingParameter]
    public bool ServerDataMode { get; set; }

    [Parameter]
    public EventCallback<int> DataSetSizeChange { get; set; }

    [Parameter]
    public EventCallback DataModeChange { get; set; }

    [Parameter]
    public EventCallback<string?> SearchInitiated { get; set; }

    [Parameter]
    public EventCallback MachineAdded { get; set; }

    private async Task Search()
    {
        await SearchInitiated.InvokeAsync(SearchTerm);
    }

    private async Task SetDataSize(int size)
    {
        _sizeSelection = size;
        await DataSetSizeChange.InvokeAsync(size);
    }

    private async Task ChangeDataMode()
    {
        await DataModeChange.InvokeAsync();
    }

    private async Task AddMachine()
    {
        var parameters = new DialogParameters<AddMachineDialog> { { d => d.AddURI, Configuration["API:AddURI"] } };
        var dialog = await DialogService.ShowAsync<AddMachineDialog>(null, parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await MachineAdded.InvokeAsync();
        }
    }
}