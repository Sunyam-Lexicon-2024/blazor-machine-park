@using System.Text.Json

@inject ISnackbar Snackbar
@inject HttpClient ApiClient

<MudDialog Class="pa-5 ma-5">
    <TitleContent>
        <MudText Class="d-flex align-center">
            <MudIcon Class="mr-2" Icon="@Icons.Material.Filled.Computer" />
            <h2>New Machine</h2>
        </MudText>
    </TitleContent>
    <DialogActions>
        <MudForm Model="@_formModel" @ref="_form" @bind-IsValid="@success" @bind-Errors="@errors">
            <MudInputControl Class="pa-2 ma-2">
                <MudTextField @bind-Value="@_formModel!.Name" T="string" Label="Name" Required="true"
                    RequiredError="A Machine name is required!" />
                <MudSlider @bind-Value="@_formModel!.Wattage" Variant="Variant.Filled" T="double" Min="10" Max="1000">
                    Wattage (@_formModel.Wattage) kWh
                </MudSlider>
                <MudNumericField @bind-Value="@_formModel!.Section" T="int" Label="Section" Min="1" Max="100" />
                <MudCheckBox @bind-Value="@_formModel!.Online" T="bool" Label="Online" />
            </MudInputControl>
            <MudInputControl Class="d-flex flex-row">
                <MudButton Class="mr-2" Variant="Variant.Filled" Color="@Color.Primary" OnClick="@SubmitForm">Create
                    Machine
                </MudButton>
                <MudButton Variant="Variant.Filled" Color="@Color.Default" OnClick="Cancel">Cancel
                </MudButton>
            </MudInputControl>
        </MudForm>
    </DialogActions>
    <DialogContent>
        @if (apiErrorResponse is not null)
        {
            <MudText class="mt-3" Color="@Color.Error">@apiErrorResponse.Message</MudText>
            @if (apiErrorResponse.Errors is not null)
            {
                @foreach (var property in apiErrorResponse.Errors)
                {
                    <MudText Color="@Color.Error">Property: @property.Key</MudText>
                    @foreach (var error in property.Value)
                    {
                        <MudText Color="@Color.Error">Error: @error</MudText>
                    }
                }
            }
            else
            {
                <MudText Color="@Color.Error">@apiErrorResponse.Message</MudText>
            }
        }
    </DialogContent>
</MudDialog>

@code
{

    private bool success;
    private APIErrorResponseModel? apiErrorResponse { get; set; }
    private APISuccessResponseModel? apiSuccessResponse { get; set; }
    private string[] errors = { };
    private MudForm? _form;
    private MachineModel? _formModel;

    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    [Parameter]
    public string? AddURI { get; set; }

    protected override void OnInitialized()
    {
        _formModel = new();
    }

    private void Cancel() => MudDialog!.Cancel();

    private async Task SubmitForm()
    {
        await _form!.Validate();

        if (success)
        {
            var response = await ApiClient.PostAsJsonAsync(AddURI, _formModel);
            await SetAPIResponse(response);
        }
    }

    private async Task SetAPIResponse(HttpResponseMessage response)
    {
        if ((int)response.StatusCode == StatusCodes.Status400BadRequest)
        {
            apiErrorResponse = JsonSerializer.Deserialize<APIErrorResponseModel>(await response.Content.ReadAsStringAsync());
            Snackbar.Add("Failed to create machine. Please try again", Severity.Error);
        }
        else if (response.IsSuccessStatusCode)
        {
            apiSuccessResponse = JsonSerializer.Deserialize<APISuccessResponseModel>(await response.Content.ReadAsStringAsync());
            MudDialog!.Close(DialogResult.Ok(apiSuccessResponse!.Id));
            Snackbar.Add($@"Machine ""{_formModel!.Name}"" created with ID [{apiSuccessResponse.Id}]", Severity.Success);
        }
        else
        {
            apiErrorResponse = new()
                {
                    Message = "API not available; please try again later."
                };
            Snackbar.Add("Could not contact API", Severity.Error);
        }
    }
}