@inject HttpClient ApiClient

<MudContainer>
    <MudElement Class="mb-5 d-flex align-center ">
        <MudIcon Class="mr-2" Icon="@Icons.Material.Filled.Analytics"></MudIcon>
        <h2>Machine Stats</h2>
    </MudElement>
    <MudPaper>
        <MudCard>
            @if (Stats is not null)
            {
                <MudCardContent>
                    <MudText class="ma-2"><strong>Machine Count</strong></MudText>
                    <MudText class="ma-2">@Stats.MachineCount</MudText>
                    <MudText class="ma-2"><strong>Online Count</strong></MudText>
                    <MudText class="ma-2">@Stats.OnlineCount</MudText>
                    <MudText class="ma-2"><strong>Offline Count</strong></MudText>
                    <MudText class="ma-2">@Stats.OfflineCount</MudText>
                    <MudText class="ma-2"><strong>Total Wattage (kWh)</strong></MudText>
                    <MudText class="ma-2">@Stats.TotalWattage</MudText>
                </MudCardContent>
                <MudDivider />
                <MudCardHeader>
                    <MudIcon Class="mr-2" Icon="@Icons.Material.Filled.Computer"></MudIcon>
                    <MudText><strong>Last Updated Machine</strong></MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudText class="ma-2"><strong>ID</strong></MudText>
                    <MudText class="ma-2">@Stats.LastUpdated!.Id</MudText>
                    <MudText class="ma-2"><strong>Name</strong></MudText>
                    <MudText class="ma-2">@Stats.LastUpdated!.Name</MudText>
                </MudCardContent>
            }
            else
            {
                if (ApiState == ApiState.Reachable)
                {
                    <MudAlert Severity="Severity.Info">No Data Available</MudAlert>
                }
                else
                {
                    <MudAlert Severity="Severity.Error">API not available</MudAlert>
                }
            }
        </MudCard>
    </MudPaper>
</MudContainer>

@code {

    [Parameter]
    public ApiState ApiState { get; set; }
    
    public MachineStatsModel? Stats { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await FetchData();
    }

    public async Task FetchData()
    {
        try
        {
            Stats = await ApiClient.GetFromJsonAsync<MachineStatsModel>("machines/stats/get-machine-stats");
            ApiState = ApiState.Reachable;
        }
        catch (Exception ex)
        {
            Log.Error(ex, "Could not get machine data from API.");
            ApiState = ApiState.Unreachable;
        }
    }
}